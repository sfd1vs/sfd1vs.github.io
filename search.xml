<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>排序算法</title>
    <url>/2021/04/12/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p><img src="./assets/10%E7%A7%8D%E9%80%9A%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.png"></p>
<span id="more"></span>

<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><ul>
<li><p>思路：</p>
<ol>
<li>找出最小元素所在的位置</li>
<li>更新最小元素所在的位置</li>
<li>交换元素<br></li>
</ol>
</li>
<li><p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span>, <span class="keyword">class</span> <span class="title">Compare</span> =</span> std::less&lt;<span class="keyword">typename</span> std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(ForwardIt first, ForwardIt last, Compare comp = Compare&#123;&#125;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; first &lt; last - <span class="number">1</span>; ++first)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> min_pos = first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = std::<span class="built_in">next</span>(first); it &lt; last; ++it)</span><br><span class="line">        &#123;</span><br><span class="line">            min_pos = <span class="built_in">comp</span>(*it, *min_pos) ? it : min_pos;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        std::<span class="built_in">iter_swap</span>(min_pos, first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>优化</p>
<ul>
<li>每次同时找出最大和最小值</li>
<li>交换最大和最小值</li>
<li>修改查找的边界</li>
</ul>
</li>
<li><p>代码</p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span>, <span class="keyword">class</span> <span class="title">Compare</span> =</span> std::less&lt;<span class="keyword">typename</span> std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">smart_select_sort</span><span class="params">(ForwardIt first, ForwardIt last, Compare comp = Compare&#123;&#125;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; first &lt; last - <span class="number">1</span>; ++first, --last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> min_pos = first;</span><br><span class="line">        <span class="keyword">auto</span> max_pos = last - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">comp</span>(*max_pos, *min_pos))</span><br><span class="line">            std::<span class="built_in">iter_swap</span>(min_pos, max_pos);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = std::<span class="built_in">next</span>(first); it &lt; last; ++it)</span><br><span class="line">        &#123;</span><br><span class="line">            min_pos = <span class="built_in">comp</span>(*it, *min_pos) ? it : min_pos;</span><br><span class="line">            max_pos = <span class="built_in">comp</span>(*it, *max_pos) ? max_pos : it;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        std::<span class="built_in">iter_swap</span>(min_pos, first);</span><br><span class="line">        std::<span class="built_in">iter_swap</span>(max_pos, std::<span class="built_in">prev</span>(last));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ul>
<li><p>思路：</p>
<ol>
<li>依次比较相邻的两个元素，将最大或最小的元素放到最后</li>
<li>对剩下的元素进行同样的操作<br></li>
</ol>
</li>
<li><p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span>, <span class="keyword">class</span> <span class="title">Compare</span> =</span> std::less&lt;<span class="keyword">typename</span> std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(ForwardIt first, ForwardIt last, Compare comp = Compare&#123;&#125;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; last &gt; first; --last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> iter = first; iter &lt; last - <span class="number">1</span>; ++iter)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">comp</span>(*iter, *(std::<span class="built_in">next</span>(iter))))</span><br><span class="line">                std::<span class="built_in">iter_swap</span>(iter, std::<span class="built_in">next</span>(iter));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序(*)"></a>插入排序(*)</h2><ul>
<li><p>思路：</p>
<ol>
<li>假设前 n 个元素已经排序</li>
<li>将后续的元素插入已排序的元素中<br></li>
</ol>
</li>
<li><p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span>, <span class="keyword">class</span> <span class="title">Compare</span> =</span> std::less&lt;<span class="keyword">typename</span> std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(ForwardIt first, ForwardIt last, Compare comp = Compare&#123;&#125;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iter1 = std::<span class="built_in">next</span>(first); iter1 != last; ++iter1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> iter2 = iter1; iter2 &gt; first; --iter2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">comp</span>(*iter2, *(std::<span class="built_in">prev</span>(iter2))))</span><br><span class="line">                std::<span class="built_in">iter_swap</span>(iter2, std::<span class="built_in">prev</span>(iter2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><ul>
<li><p>特点<br>ㅤ ㅤ希尔排序是插入排序的优化版本，按照指定的步长进行排序</p>
</li>
<li><p>优点</p>
<ul>
<li>间隔大的时候，移动次数少</li>
<li>间隔小的时候，移动距离短</li>
</ul>
</li>
<li><p>思路</p>
<ul>
<li>先写插入排序，插入排序是按照固定步长 1 进行排序</li>
<li>修改为步长为变量</li>
</ul>
</li>
<li><p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span>, <span class="keyword">class</span> <span class="title">Compare</span> =</span> std::less&lt;<span class="keyword">typename</span> std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(ForwardIt first, ForwardIt last, Compare comp = Compare&#123;&#125;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> len = std::<span class="built_in">distance</span>(first, last);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">comp</span>(*first, *(std::<span class="built_in">prev</span>(last))))</span><br><span class="line">            std::<span class="built_in">iter_swap</span>(first, std::<span class="built_in">prev</span>(last));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &lt; len / <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        h = h * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> gap = h; gap &gt; <span class="number">0</span>; gap = (gap - <span class="number">1</span>) / <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> iter1 = first + gap; iter1 &lt; last; ++iter1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> iter2 = iter1; iter2 &gt; first + gap - <span class="number">1</span>; iter2 -= gap)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">comp</span>(*iter2, *(std::<span class="built_in">prev</span>(iter2))))</span><br><span class="line">                    std::<span class="built_in">iter_swap</span>(iter2, std::<span class="built_in">prev</span>(iter2));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序(*)"></a>归并排序(*)</h2><ul>
<li><p>思路</p>
<ul>
<li>分割 ： 递归地把当前序列平均分割成两半。</li>
<li>集成 ： 在保持元素顺序的同时将上一步得到的子序列集成到一起（归并）</li>
</ul>
</li>
<li><p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span>, <span class="keyword">class</span> <span class="title">Compare</span> =</span> std::less_equal&lt;<span class="keyword">typename</span> std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;&gt;&gt;</span><br><span class="line"><span class="keyword">void</span> _merge(ForwardIt first, ForwardIt last, Compare comp = Compare&#123;&#125;)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> mid = std::<span class="built_in">next</span>(first, std::<span class="built_in">distance</span>(first, last) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> left&#123; first &#125;, right&#123; mid &#125;;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;<span class="keyword">typename</span> ForwardIt::value_type&gt; temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left != mid &amp;&amp; right != last)</span><br><span class="line">    &#123;</span><br><span class="line">        temp.<span class="built_in">emplace_back</span>((*left &lt;= *right) ? *left++ : *right++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    temp.<span class="built_in">insert</span>(temp.<span class="built_in">end</span>(), left, mid);</span><br><span class="line">    temp.<span class="built_in">insert</span>(temp.<span class="built_in">end</span>(), right, last);</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">move</span>(temp.<span class="built_in">begin</span>(), temp.<span class="built_in">end</span>(), first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span>, <span class="keyword">class</span> <span class="title">Compare</span> =</span> std::less&lt;<span class="keyword">typename</span> std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(ForwardIt first, ForwardIt last, Compare comp = Compare&#123;&#125;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> size = std::<span class="built_in">distance</span>(first, last);</span><br><span class="line">    <span class="keyword">if</span> (size &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> mid = std::<span class="built_in">next</span>(first, size / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">merge_sort</span>(first, mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(mid, last);</span><br><span class="line">    _merge(first, last);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序(*)"></a>快速排序(*)</h2><ul>
<li>代码<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* partition by STL */</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span>, <span class="keyword">class</span> <span class="title">Compare</span> =</span> std::less&lt;<span class="keyword">typename</span> std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(ForwardIt first, ForwardIt last, Compare comp = Compare&#123;&#125;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (first &gt;= last)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> pValue = *first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> pivot = std::<span class="built_in">stable_partition</span>(first, last, [&amp;comp, pValue](<span class="keyword">auto</span> value)&#123;<span class="keyword">return</span> <span class="built_in">comp</span>(value, pValue);&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">quick_sort</span>(first, pivot);</span><br><span class="line">    <span class="built_in">quick_sort</span>(std::<span class="built_in">next</span>(pivot), last);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* partition by ourself */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ForwardIt, <span class="keyword">typename</span> Compare = std::less&lt;<span class="keyword">typename</span> std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;&gt;</span><br><span class="line">ForwardIt _partition1(ForwardIt first, ForwardIt last, Compare comp = Compare&#123;&#125;)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> pivot = std::<span class="built_in">prev</span>(last);</span><br><span class="line">    <span class="keyword">auto</span> low = first;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = first; it != pivot; ++it)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">comp</span>(*it, *pivot))</span><br><span class="line">        &#123;</span><br><span class="line">            std::<span class="built_in">iter_swap</span>(low++, it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">iter_swap</span>(low, pivot);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ForwardIt, <span class="keyword">typename</span> Compare = std::less&lt;<span class="keyword">typename</span> std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;&gt;</span><br><span class="line"><span class="keyword">void</span> <span class="built_in">quick_sort</span>(ForwardIt first, ForwardIt last, Compare comp = Compare&#123;&#125;)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (std::<span class="built_in">distance</span>(first, last) &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    ForwardIt bound = _partition(first, last, comp);</span><br><span class="line">    <span class="built_in">quick_sort</span>(first, bound);</span><br><span class="line">    <span class="built_in">quick_sort</span>(std::<span class="built_in">next</span>(bound), last);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><ul>
<li><p>思路</p>
<ul>
<li>找到最大、最小值</li>
<li>申请新的空间并记录元素出现的次数</li>
<li>对所有的计数累加</li>
<li>反向填充目标数组</li>
</ul>
</li>
<li><p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">counting_sort</span><span class="params">(T&amp; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> U = <span class="keyword">typename</span> std::decay&lt;<span class="keyword">decltype</span>(arr)&gt;::type;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">auto</span> [min, max] = std::<span class="built_in">minmax_element</span>(<span class="built_in">begin</span>(arr), <span class="built_in">end</span>(arr));</span><br><span class="line"></span><br><span class="line">	<span class="function">U <span class="title">countArray</span><span class="params">(*max - *min + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		countArray[arr[i]-*min]++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i &lt; countArray.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		countArray[i] += countArray[i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">U <span class="title">newArray</span><span class="params">(arr.size())</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = arr.<span class="built_in">size</span>()<span class="number">-1</span>; i &gt;=<span class="number">0</span> ; --i)</span><br><span class="line">	&#123;</span><br><span class="line">		newArray[--countArray[arr[i]-*min]] = arr[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序(*)"></a>堆排序(*)</h2><!-- more -->]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C++复习-(关键字)</title>
    <url>/2021/04/07/%E5%A4%8D%E4%B9%A0-%E8%AF%AD%E8%A8%80-%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>ㅤ ㅤconst 关键字指定对象或变量不可修改</p>
<span id="more"></span>

<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><h4 id="普遍变量"><a href="#普遍变量" class="headerlink" title="普遍变量"></a>普遍变量</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> j = i + <span class="number">10</span>; </span><br><span class="line">    i++;                            <span class="comment">// Error. 变量不可修改, 尽在编译时有效，运行时无效</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> *p1 = &amp;i;                   <span class="comment">// 运行时修改 i 的值</span></span><br><span class="line">    *p1++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a1 = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> a2 = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> * p1 = &amp;a1;            <span class="comment">// 常量指针</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> * p2 = &amp;a1;            <span class="comment">// 常量指针</span></span><br><span class="line">    *p1 = *p2 = <span class="number">1</span>;                   <span class="comment">// Error. 不能通过指针修改指针所指向的对象的数据</span></span><br><span class="line">    p1 = p2 = &amp;a2;                   <span class="comment">// Okay.  可以修改指针的指向</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> * <span class="keyword">const</span> p3 = &amp;a1;            <span class="comment">// 指针常量</span></span><br><span class="line">    *p3 = <span class="number">1</span>;                         <span class="comment">// Okay.  可以通过指针修改指针所指向的对象的数据</span></span><br><span class="line">    p3 = &amp;a2;                        <span class="comment">// Error. 不能修改指针的指向            </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p4 = &amp;a1;</span><br><span class="line">    *p4 = <span class="number">1</span>;                         <span class="comment">// Error. 不能通过指针修改指针所指向的对象的数据</span></span><br><span class="line">    p4 = &amp;a2;                        <span class="comment">// Error. 不能修改指针的指向</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> &amp; ref1 = a;         <span class="comment">// Okay    lvalue</span></span><br><span class="line">    <span class="keyword">int</span> &amp; ref2 = <span class="number">1</span>;         <span class="comment">// Error   rvalue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> &amp; cref1 = a;  <span class="comment">// Okay    lvalue </span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> &amp; cref2 = <span class="number">2</span>;  <span class="comment">// Okay    rvalue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><ul>
<li><p>返回值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>&#123;</span>...&#125;;</span><br><span class="line"><span class="keyword">const</span> Rational <span class="keyword">operator</span>* (<span class="keyword">const</span> Rational&amp; lhs, <span class="keyword">const</span> Rational&amp; rhs);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Rational a,b,c;</span><br><span class="line">    (a * b) = c;      <span class="comment">// 如果 a 和 b 是内置类型，代码直截了当的不合法；</span></span><br><span class="line">                      <span class="comment">// 而对于用户自定义类型，可以通过 const 来限制一些莫名其妙的操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>参数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">use</span><span class="params">(<span class="keyword">const</span> Rational&amp; lhs)</span></span>;          <span class="comment">// 不能修改原参数的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">use</span><span class="params">(Rational&amp; lhs)</span>                 <span class="comment">// 可以修改</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><ul>
<li><p>数据成员</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Msg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> uint id_;             <span class="comment">// 类中一旦定义了常成员，默认构造函数将被删除</span></span><br><span class="line">    std::string data_; </span><br><span class="line"></span><br><span class="line">    <span class="built_in">Msg</span>(uint id):<span class="built_in">id_</span>(id)&#123;&#125;      <span class="comment">// 必须使用初始化表初始化常成员</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">auto</span> a_ = <span class="number">6</span>;   <span class="comment">// 设置静态变量的初值为编译时常量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> c = <span class="number">5</span>;</span><br><span class="line">    std::array&lt;Data, c&gt; msgs;        <span class="comment">// Error</span></span><br><span class="line">    std::array&lt;Data, Data::a_&gt; arr;  <span class="comment">// Okay</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>类成员函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextBook</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TextBook</span>(<span class="keyword">const</span> std::string&amp; lhs):<span class="built_in">text</span>(lhs)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="keyword">size_t</span> position)<span class="keyword">const</span>           <span class="comment">// const 和 non-const 可以构成重载关系</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> text[position];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="keyword">size_t</span> position)                      <span class="comment">// 避免代码重复</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>&amp;&gt;(</span><br><span class="line">                    <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> TextBook&amp;&gt;(*<span class="keyword">this</span>)</span><br><span class="line">                        [position]</span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">const</span> std::string&amp; lhs)</span><span class="keyword">const</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string text;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>对象</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">TextBook <span class="title">tb</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    tb[<span class="number">1</span>];                              <span class="comment">// non-const</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> TextBook <span class="title">ctb</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    ctb[<span class="number">1</span>];                             <span class="comment">// const</span></span><br><span class="line"></span><br><span class="line">    tb.<span class="built_in">display</span>();                       <span class="comment">// Okay call non-const func</span></span><br><span class="line">    tb.<span class="built_in">display</span>(<span class="string">&quot;world&quot;</span>);                <span class="comment">// Okay call const func</span></span><br><span class="line"></span><br><span class="line">    ctb.<span class="built_in">display</span>();                      <span class="comment">// Error </span></span><br><span class="line">    ctb.<span class="built_in">display</span>(<span class="string">&quot;world&quot;</span>);               <span class="comment">// Okay call const func</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><ul>
<li><p>define 宏定义和 const 常变量区别：</p>
<ol>
<li>类型和安全检查不同<ul>
<li>宏定义是字符替换，没有数据类型的区别，同时这种替换没有类型安全检查，可能产生边际效应(需要用小括号处理宏)等错误；</li>
<li>const 常量是常量的声明，有类型区别，需要在编译阶段进行类型检查</li>
</ul>
</li>
<li>编译器处理不同<ul>
<li>宏定义是一个”编译时”概念，在预处理阶段展开，不能对宏定义进行调试(-g3 可以调)，生命周期结束于编译时期；</li>
<li>const 常量是一个”运行时”概念，在程序运行使用，类似于一个只读行数据</li>
</ul>
</li>
<li>存储方式不同<ul>
<li>宏定义是直接替换，不会分配内存，存储于程序的代码段中；</li>
<li>const 常量需要进行内存分配，存储于程序的数据段中</li>
</ul>
</li>
<li>作用域不同<ul>
<li>宏定义定义后可以在任何地方使用，没有作用域限制，宏定义是可以取消的</li>
<li>const 常量有作用限制，无法取消</li>
</ul>
</li>
</ol>
</li>
<li><p>注意 ：</p>
<ul>
<li>const 定义的变量只有类型为<strong>整数或枚举，且以常量表达式初始化时</strong>才能作为常量表达式；其他情况下它只是一个 const 限定的变量，不要将与常量混淆。</li>
<li>非 const 变量默认为 extern。要使 const 变量能够在其他文件中访问，必须在文件中显式地指定它为 extern。  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file1.cpp</span></span><br><span class="line"><span class="keyword">int</span> ext</span><br><span class="line"><span class="comment">// file2.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> ext;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout&lt;&lt;(ext+<span class="number">10</span>)&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//extern_file1.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> ext=<span class="number">12</span>;</span><br><span class="line"><span class="comment">//extern_file2.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> ext;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout&lt;&lt;ext&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>ㅤ ㅤ控制变量的生存周期和作用域</p>
<h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul>
<li><p>局部变量</p>
<ol>
<li>未经初始化的静态全局变量会被程序自动初始化为0，仅被初始化一次</li>
<li>作用域为局部作用域（函数内部）</li>
<li>生命周期起始于 main 函数之前，结束于程序结束后<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">counter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count;                       <span class="comment">// 作用域存在函数内部</span></span><br><span class="line">    std::cout &lt;&lt; count++ &lt;&lt; <span class="string">&quot; &quot;</span>;            <span class="comment">// 0 1 2 3 4 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">counter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>全局变量<br>ㅤ ㅤ1. 作用域限制于文件内部</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo.cpp</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a;                   <span class="comment">// 全局变量 a 此时是文件作用域 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a;                   <span class="comment">// 声明变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">counter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; a++ &lt;&lt; <span class="string">&quot; &quot;</span>;    <span class="comment">// 编译时出现链接错误，undefined reference to `a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">counter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>解决方法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo.cpp</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a;                     <span class="comment">// 全局变量 a 此时是文件作用域 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">getA</span><span class="params">()</span>                       <span class="comment">// 函数的作用域没有被限制</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;a;                              </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span>* <span class="title">getA</span><span class="params">()</span></span>;               <span class="comment">// 声明函数，由于函数作用域没有被限制，所以链接的时候可以找到此函数的定义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">counter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> * p = <span class="built_in">getA</span>();                       </span><br><span class="line">    std::cout &lt;&lt; (*p) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    (*p)++;                       <span class="comment">// 通过指针修改 无法直接访问的变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">counter</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* output : 0 1 2 3 4 */</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h4><ul>
<li>作用域限制于文件内部<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo.cpp</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>* <span class="title">getA</span><span class="params">()</span>                      <span class="comment">// 函数作用域被限制在了文件的内部</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span>* <span class="title">getA</span><span class="params">()</span></span>;                     <span class="comment">// extern 声明函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">counter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> * p = <span class="built_in">getA</span>();                   <span class="comment">// 编译时出现链接错误，undefined reference to `getA()&#x27;</span></span><br><span class="line">    std::cout &lt;&lt; (*p) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    (*p)++;                                 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">counter</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h4><ul>
<li><p>静态成员</p>
<ol>
<li>静态成员变量不属于对象，被存放在全局区，不能在构造函数里面定义和初始化，需要在类的外部单独定义</li>
<li>静态的成员变量在该类的多个实例对象之间共享</li>
<li>静态成员变量一样受到访问控制符的影响<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> v1;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> v2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T::v1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> T::v2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T t1,t2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(T) : %lu\n&quot;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(T));         <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(t1) : %lu\n&quot;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(t1));       <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(t2) : %lu\n&quot;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(t2));       <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;t1.v1 : %p\n&quot;</span>, &amp;t1.v1);                <span class="comment">// 0x561178f41044</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;t2.v2 : %p\n&quot;</span>, &amp;t2.v1);                <span class="comment">// 0x561178f41044</span></span><br><span class="line"></span><br><span class="line">    T::v1 = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;t1.v1 : %d\n&quot;</span>, t1.v1);                  <span class="comment">// 2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;t2.v2 : %d\n&quot;</span>, t2.v1);                  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;t1.v1 : %d\n&quot;</span>, t1.v2);                  <span class="comment">// Error  is private </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;T::v2 : %d\n&quot;</span>, T::v2);                  <span class="comment">// Error  is private </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>静态成员函数</p>
<ol>
<li>静态成员函数没有 this 指针，也没有 const 属性</li>
<li>在静态成员函数中，只能访问静态成员，不能访问普通的成员变量</li>
<li>静态成员函数 和 非静态成员函数 无法构成重载关系<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span><span class="keyword">const</span>     <span class="comment">// Error 静态成员函数上不允许使用类型限定符</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span>            </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b_;              <span class="comment">// Error  invalid use of member ‘T::b_’ in static member function</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a_ = num;               <span class="comment">// Okay</span></span><br><span class="line">        b_ = num;               <span class="comment">// Okay</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a_;</span><br><span class="line">    <span class="keyword">int</span> b_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T::a_ = <span class="number">6</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>静态对象</p>
<ul>
<li>静态局部对象当且仅当对象首次用到时才进行构造，若初始化抛出异常，则不认为变量被初始化，且控制下次经过该声明时将再次尝试初始化。</li>
<li>静态全局对象 和 普通全局对象 程序开始时(main之前或更早)进行构造，程序结束时析构<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">T</span>()&#123; std::cout &lt;&lt; <span class="string">&quot;T()&quot;</span> &lt;&lt; std::endl;&#125;</span><br><span class="line">    ~<span class="built_in">T</span>()&#123; std::cout &lt;&lt; <span class="string">&quot;~T()&quot;</span> &lt;&lt; std::endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span>                                     <span class="comment">// 调用时 test() 才会调用构造函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;test&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">static</span> T t7;                            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T t1,t2,t3;                                     <span class="comment">// main 之前调用 构造函数</span></span><br><span class="line"><span class="keyword">static</span> T t4,t5,t6;                              <span class="comment">// main 之前调用 构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;main&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* output : </span></span><br><span class="line"><span class="comment">    T()</span></span><br><span class="line"><span class="comment">    T()</span></span><br><span class="line"><span class="comment">    T()</span></span><br><span class="line"><span class="comment">    T()</span></span><br><span class="line"><span class="comment">    T()</span></span><br><span class="line"><span class="comment">    T()</span></span><br><span class="line"><span class="comment">    test</span></span><br><span class="line"><span class="comment">    T()</span></span><br><span class="line"><span class="comment">    main</span></span><br><span class="line"><span class="comment">    ~T()</span></span><br><span class="line"><span class="comment">    ~T()</span></span><br><span class="line"><span class="comment">    ~T()</span></span><br><span class="line"><span class="comment">    ~T()</span></span><br><span class="line"><span class="comment">    ~T()</span></span><br><span class="line"><span class="comment">    ~T()</span></span><br><span class="line"><span class="comment">    ~T()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="其它-1"><a href="#其它-1" class="headerlink" title="其它"></a>其它</h4><h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h5><p>ㅤ ㅤ一个类只允许创建唯一的对象</p>
<ol>
<li><p>创建要求</p>
<ul>
<li>禁止在类的外部创建对象 ：私有化构造函数</li>
<li>类的内部自己维护唯一的对象 ：静态成员变量</li>
<li>提供一个访问单例对象的方法 ：静态成员函数</li>
</ul>
</li>
<li><p>创建方式</p>
<ul>
<li><p>饿汉式：单例对象无论用与不用，程序启动即创建</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="built_in">Singleton</span>(Singleton&amp;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(Singleton&amp;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton&amp; <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> Singleton s;</span><br><span class="line">        <span class="keyword">return</span> (s);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() = <span class="keyword">default</span>;</span><br><span class="line">    ~<span class="built_in">Singleton</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Singleton &amp;a1 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton &amp;a2 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a1 : %p\n&quot;</span>, &amp;a1);  <span class="comment">// 0x563b399c7052</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a1 : %p\n&quot;</span>, &amp;a2);  <span class="comment">// 0x563b399c7052</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>懒汉式：单例对象用的时候再创建，不用即销毁</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> Singleton *_instance;</span><br><span class="line">    <span class="keyword">static</span> std::mutex mutex_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() = <span class="keyword">default</span>;</span><br><span class="line">    ~<span class="built_in">Singleton</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>(Singleton &amp;other) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton <span class="keyword">operator</span>=(<span class="keyword">const</span> Singleton &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="built_in">Singleton</span>(Singleton&amp;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(Singleton&amp;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton &amp;<span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (_instance == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (_instance == <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (*_instance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton *Singleton::_instance = <span class="literal">nullptr</span>;</span><br><span class="line">std::mutex Singleton::mutex_;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Singleton &amp;a1 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    Singleton &amp;a2 = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a1 : %p\n&quot;</span>, &amp;a1);          <span class="comment">// 0x5591e40e4e70</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a1 : %p\n&quot;</span>, &amp;a2);          <span class="comment">// 0x5591e40e4e70</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><ul>
<li><p>区分作用域</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// T(int a):this-&gt;a(a)&#123;&#125;    // Error expected identifier before ‘this’</span></span><br><span class="line">    <span class="built_in">T</span>(<span class="keyword">int</span> a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">t</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; t.<span class="built_in">get</span>() &lt;&lt; std::endl; <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>从成员函数中返回调用对象自身</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Counter</span>(<span class="keyword">int</span> data = <span class="number">0</span>) : <span class="built_in">m_data</span>(data) &#123;&#125;</span><br><span class="line">    <span class="function">Counter &amp;<span class="title">add</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ++m_data;</span><br><span class="line">        <span class="comment">// this指向调用对象，*this就是调用对象自身</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">// 返回自引用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m_data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Counter cn;</span><br><span class="line">    cn.<span class="built_in">add</span>().<span class="built_in">add</span>().<span class="built_in">add</span>();</span><br><span class="line">    std::cout &lt;&lt; cn.m_data &lt;&lt; std::endl; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>从类的内部销毁对象自身</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl;             <span class="comment">// 0x1ecde70    </span></span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>;                                <span class="comment">// 对象自销毁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Counter *p = <span class="keyword">new</span> Counter;               </span><br><span class="line">    std::cout &lt;&lt; p &lt;&lt; std::endl;                    <span class="comment">// 0x1ecde70</span></span><br><span class="line">    p-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="this-指针指向"><a href="#this-指针指向" class="headerlink" title="this 指针指向"></a>this 指针指向</h3><ul>
<li>对于普通成员函数，this 指向调用该函数的对象</li>
<li>对于构造函数，this 指向正在创建的对象</li>
<li>this 指针并不是对象本身的一部分，不会影响 sizeof(对象) 的结果</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">T</span>()&#123; std::cout &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;std::cout &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T t1;           <span class="comment">// 0x7ffcc1a04328</span></span><br><span class="line">    t1.<span class="built_in">show</span>();      <span class="comment">// 0x7ffcc1a04328</span></span><br><span class="line"></span><br><span class="line">    T t2;           <span class="comment">// 0x7ffcc1a04320</span></span><br><span class="line">    t2.<span class="built_in">show</span>();      <span class="comment">// 0x7ffcc1a04320</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sizeof(T) &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(T) &lt;&lt; std::endl;        <span class="comment">// 1</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;sizeof(t1) &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(t1) &lt;&lt; std::endl;      <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h2><h3 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h3><p>ㅤ ㅤ在函数声明或定义中，函数返回类型前加上关键字inline，即可以把函数指定为内联函数；本质是空间换时间，是否 inline 取决于编译器</p>
<ul>
<li><p>inline 与 宏</p>
<ul>
<li>内联函数和宏，都可以减少函数调用的开销</li>
<li>对比宏，内联函数多了语法检测和函数特性</li>
</ul>
</li>
<li><p>虚函数（virtual）可以是内联函数（inline）吗？</p>
<ul>
<li>虚函数可以是内联函数，内联是可以修饰虚函数的，但是当虚函数表现多态性的时候不能内联。</li>
<li>内联是在编译期建议编译器内联，而虚函数的多态性在运行期，编译器无法知道运行期调用哪个代码，因此虚函数表现为多态性时（运行期）不可以内联。</li>
<li>inline virtual 唯一可以内联的时候是：编译器知道所调用的对象是哪个类（如 Base::who()），这只有在编译器具有实际对象而不是对象的指针或引用时才会发生。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">who</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;I am Base\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Base</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">who</span><span class="params">()</span>  <span class="comment">// 不写inline时隐式内联</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;I am Derived\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 此处的虚函数 who()，是通过类（Base）的具体对象（b）来调用的，编译期间就能确定了，所以它可以是内联的，但最终是否内联取决于编译器。 </span></span><br><span class="line">    Base b;</span><br><span class="line">    b.<span class="built_in">who</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处的虚函数是通过指针调用的，呈现多态性，需要在运行时期间才能确定，所以不能为内联。  </span></span><br><span class="line">    Base *ptr = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">    ptr-&gt;<span class="built_in">who</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为Base有虚析构函数（virtual ~Base() &#123;&#125;），所以 delete 时，会先调用派生类（Derived）析构函数，再调用基类（Base）析构函数，防止内存泄漏。</span></span><br><span class="line">    <span class="keyword">delete</span> ptr;</span><br><span class="line">    ptr = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h2><h3 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h3><ul>
<li><p>为什么要引入nullptr？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;f(int a)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>* a)</span> </span>&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;f(void *a)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">f</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">f</span>(<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>nullptr 可以调用函数吗？为什么？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="comment">// m_a = 0;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	A* p = <span class="literal">nullptr</span>;</span><br><span class="line">	p-&gt;<span class="built_in">func</span>();      <span class="comment">// 可以正常调用，成员函数不属于类，实际调用时相对于 A::func(this);只要在func中不用到this指针就没问题</span></span><br><span class="line">	p-&gt;<span class="built_in">vfunc</span>();     <span class="comment">// 空指针异常，虚表指针在对象构建的时候创建，32位系统下在对象的前4个字节，根据虚表指针找虚函数表，在 type_info 确定调用哪个函数</span></span><br><span class="line">                    <span class="comment">// 此时 p 是 nullptr，无法通过 p 间接找到函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<!-- more -->]]></content>
      <categories>
        <category>C</category>
        <category>C++</category>
        <category>Interview</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索算法</title>
    <url>/2021/04/12/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="搜索算法"><a href="#搜索算法" class="headerlink" title="搜索算法"></a>搜索算法</h1><span id="more"></span>
<h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><h2 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIt</span>, </span></span><br><span class="line"><span class="class">		 <span class="keyword">class</span> <span class="title">T</span>,</span></span><br><span class="line"><span class="class">		 <span class="keyword">class</span> <span class="title">Compare</span>=</span>std::less&lt;<span class="keyword">typename</span> std::iterator_traits&lt;ForwardIt&gt;::value_type&gt;&gt;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">b_search</span><span class="params">(ForwardIt first, ForwardIt last, <span class="keyword">const</span> T&amp; value,  Compare comp = Compare&#123;&#125;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> count = std::<span class="built_in">distance</span>(first, last);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (count)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> it = first;</span><br><span class="line">		<span class="keyword">auto</span> step = count / <span class="number">2</span>;</span><br><span class="line">		std::<span class="built_in">advance</span>(it, step);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">comp</span>(*it, value))</span><br><span class="line">		&#123;</span><br><span class="line">			first = ++it;</span><br><span class="line">			count -= step + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			count = step;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> first != last &amp;&amp; !<span class="built_in">comp</span>(*first, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h2><h2 id="斐波那契查找"><a href="#斐波那契查找" class="headerlink" title="斐波那契查找"></a>斐波那契查找</h2><h2 id="二叉树查找"><a href="#二叉树查找" class="headerlink" title="二叉树查找"></a>二叉树查找</h2><h2 id="平衡查找树"><a href="#平衡查找树" class="headerlink" title="平衡查找树"></a>平衡查找树</h2><h3 id="2-3-Tree"><a href="#2-3-Tree" class="headerlink" title="2-3 Tree"></a>2-3 Tree</h3><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><h2 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h2><h2 id="哈希表法"><a href="#哈希表法" class="headerlink" title="哈希表法"></a>哈希表法</h2><!-- more -->]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>智能指针实现</title>
    <url>/2021/04/12/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="智能指针实现"><a href="#智能指针实现" class="headerlink" title="智能指针实现"></a>智能指针实现</h1><span id="more"></span>

<h2 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h2><ul>
<li><p>特点</p>
<ul>
<li>独占式指针;同一个时间内，只有一个指针能够指向该对象,但对象的所有权是可以转移出去；当这个 unique_ptr 被销毁的时候，它所指向的对象也被释放</li>
</ul>
</li>
<li><p>工作原理</p>
<ul>
<li>RAII</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unique_ptr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Unique_ptr</span>(T* ptr = <span class="literal">nullptr</span>):<span class="built_in">ptr_</span>(ptr)&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">	<span class="built_in">Unique_ptr</span>(Unique_ptr&lt;U&gt;&amp;&amp; rhs)<span class="keyword">noexcept</span> : <span class="built_in">ptr_</span>(rhs.<span class="built_in">release</span>())</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Unique_ptr&amp; <span class="keyword">operator</span>=(Unique_ptr rhs)<span class="keyword">noexcept</span></span><br><span class="line">	&#123;</span><br><span class="line">		rhs.<span class="built_in">swap</span>(*<span class="keyword">this</span>);</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">Unique_ptr</span>() &#123; <span class="keyword">delete</span> ptr_; &#125;</span><br><span class="line"></span><br><span class="line">	T&amp; <span class="keyword">operator</span>*()<span class="keyword">const</span> &#123; <span class="keyword">return</span> *ptr_; &#125;</span><br><span class="line">	T* <span class="keyword">operator</span>-&gt;()<span class="keyword">const</span> &#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span><span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">T* <span class="title">get</span><span class="params">()</span><span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ptr_; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">T* <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		T* ptr = ptr_;</span><br><span class="line">		ptr_ = <span class="literal">nullptr</span>;</span><br><span class="line">		<span class="keyword">return</span> ptr;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Unique_ptr&amp; rhs)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		std::<span class="built_in">swap</span>(ptr_, rhs.ptr_);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T* ptr_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h2><ul>
<li><p>特点</p>
<ul>
<li>共享式指针。多个指针指向同一对象，最后一个指针被销毁时，这个对象会被释放</li>
</ul>
</li>
<li><p>工作原理</p>
<ul>
<li>RAII</li>
<li>引用计数</li>
</ul>
</li>
<li><p>引用计数</p>
<ul>
<li>增加<ul>
<li>用一个智能指针来初始化另一个智能指针</li>
<li>智能指针作为函数的实参传递给函数</li>
<li>作为函数返回</li>
</ul>
</li>
<li>减少<ul>
<li>给shared_ptr赋予新值</li>
<li>赋值nullptr</li>
<li>离开作用域</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span> <span class="comment">// std::swap</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">shared_count</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">shared_count</span>() <span class="keyword">noexcept</span></span><br><span class="line">        : <span class="built_in">count_</span>(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add_count</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ++count_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">reduce_count</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> --count_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">get_count</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">long</span> count_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shared_ptr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Shared_ptr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Shared_ptr</span><span class="params">(T *ptr = <span class="literal">nullptr</span>)</span></span></span><br><span class="line"><span class="function">        : ptr_(ptr)</span></span><br><span class="line"><span class="function">    &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (ptr)</span><br><span class="line">        &#123;</span><br><span class="line">            shared_count_ = <span class="keyword">new</span> <span class="built_in">shared_count</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Shared_ptr</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;~Shared_ptr(): %p\n&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (ptr_ &amp;&amp; !shared_count_-&gt;<span class="built_in">reduce_count</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> ptr_;</span><br><span class="line">            <span class="keyword">delete</span> shared_count_;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="built_in">Shared_ptr</span>(<span class="keyword">const</span> Shared_ptr&lt;U&gt; &amp;other) <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        ptr_ = other.ptr_;</span><br><span class="line">        <span class="keyword">if</span> (ptr_)</span><br><span class="line">        &#123;</span><br><span class="line">            other.shared_count_-&gt;<span class="built_in">add_count</span>();</span><br><span class="line">            shared_count_ = other.shared_count_;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="built_in">Shared_ptr</span>(Shared_ptr&lt;U&gt; &amp;&amp;other) <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        ptr_ = other.ptr_;</span><br><span class="line">        <span class="keyword">if</span> (ptr_)</span><br><span class="line">        &#123;</span><br><span class="line">            shared_count_ = other.shared_count_;</span><br><span class="line">            other.ptr_ = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="built_in">Shared_ptr</span>(<span class="keyword">const</span> Shared_ptr&lt;U&gt; &amp;other, T *ptr) <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        ptr_ = ptr;</span><br><span class="line">        <span class="keyword">if</span> (ptr_)</span><br><span class="line">        &#123;</span><br><span class="line">            other.shared_count_-&gt;<span class="built_in">add_count</span>();</span><br><span class="line">            shared_count_ = other.shared_count_;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Shared_ptr &amp;</span><br><span class="line">    <span class="keyword">operator</span>=(Shared_ptr rhs) <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        rhs.<span class="built_in">swap</span>(*<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T *<span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ptr_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">use_count</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ptr_)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> shared_count_-&gt;<span class="built_in">get_count</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Shared_ptr &amp;rhs)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> std::swap;</span><br><span class="line">        <span class="built_in">swap</span>(ptr_, rhs.ptr_);</span><br><span class="line">        <span class="built_in">swap</span>(shared_count_, rhs.shared_count_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T &amp;<span class="keyword">operator</span>*() <span class="keyword">const</span> <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *ptr_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T *<span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ptr_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ptr_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T *ptr_;</span><br><span class="line">    shared_count *shared_count_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Shared_ptr&lt;T&gt; &amp;lhs,</span></span></span><br><span class="line"><span class="function"><span class="params">          Shared_ptr&lt;T&gt; &amp;rhs)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lhs.<span class="built_in">swap</span>(rhs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function">Shared_ptr&lt;T&gt; <span class="title">static_pointer_cast</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> Shared_ptr&lt;U&gt; &amp;other)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T *ptr = <span class="keyword">static_cast</span>&lt;T *&gt;(other.<span class="built_in">get</span>());</span><br><span class="line">    <span class="keyword">return</span> Shared_ptr&lt;T&gt;(other, ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function">Shared_ptr&lt;T&gt; <span class="title">reinterpret_pointer_cast</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> Shared_ptr&lt;U&gt; &amp;other)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T *ptr = <span class="keyword">reinterpret_cast</span>&lt;T *&gt;(other.<span class="built_in">get</span>());</span><br><span class="line">    <span class="keyword">return</span> Shared_ptr&lt;T&gt;(other, ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function">Shared_ptr&lt;T&gt; <span class="title">const_pointer_cast</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> Shared_ptr&lt;U&gt; &amp;other)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T *ptr = <span class="keyword">const_cast</span>&lt;T *&gt;(other.<span class="built_in">get</span>());</span><br><span class="line">    <span class="keyword">return</span> Shared_ptr&lt;T&gt;(other, ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function">Shared_ptr&lt;T&gt; <span class="title">dynamic_pointer_cast</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> Shared_ptr&lt;U&gt; &amp;other)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T *ptr = <span class="keyword">dynamic_cast</span>&lt;T *&gt;(other.<span class="built_in">get</span>());</span><br><span class="line">    <span class="keyword">return</span> Shared_ptr&lt;T&gt;(other, ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<!-- more -->]]></content>
      <categories>
        <category>c++</category>
        <category>code</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池</title>
    <url>/2021/04/12/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><span id="more"></span>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;future&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">class ThreadPool</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">	ThreadPool(size_t num &#x3D; std::thread::hardware_concurrency())</span><br><span class="line">	&#123;</span><br><span class="line">		for (size_t i &#x3D; 0; i &lt; num; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			threads_.emplace_back(</span><br><span class="line">				[this]() &#123;</span><br><span class="line">					for (;;)</span><br><span class="line">					&#123;</span><br><span class="line">						std::function&lt;void()&gt; task;</span><br><span class="line"></span><br><span class="line">						&#123;</span><br><span class="line">							std::unique_lock&lt;std::mutex&gt; locker(enqueue_mutex_);</span><br><span class="line">							condition_.wait(locker, [this] &#123;return is_stop_ || !tasks_.empty(); &#125;);</span><br><span class="line"></span><br><span class="line">							if (is_stop_ &amp;&amp; tasks_.empty())</span><br><span class="line">								return;</span><br><span class="line"></span><br><span class="line">							task &#x3D; std::move(tasks_.front());</span><br><span class="line">							tasks_.pop();</span><br><span class="line">						&#125;</span><br><span class="line">                        </span><br><span class="line">						task();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	template&lt;class F, class ...Args&gt;</span><br><span class="line">	auto enqueue(F&amp;&amp; f, Args&amp;&amp; ...args)-&gt;std::future&lt;decltype(f(args...))&gt;</span><br><span class="line">	&#123;</span><br><span class="line">		using return_type &#x3D; decltype(f(args...));</span><br><span class="line"></span><br><span class="line">		auto task &#x3D; std::make_shared&lt;std::packaged_task&lt;return_type()&gt;&gt;(</span><br><span class="line">			std::bind(std::forward&lt;F&gt;(f), std::forward&lt;Args&gt;(args)...)</span><br><span class="line">		);</span><br><span class="line">		</span><br><span class="line">		std::future&lt;return_type&gt; res &#x3D; task-&gt;get_future();</span><br><span class="line">		&#123;</span><br><span class="line">			std::unique_lock&lt;std::mutex&gt; locker(enqueue_mutex_);</span><br><span class="line"></span><br><span class="line">			if (is_stop_)</span><br><span class="line">				throw std::runtime_error(&quot;Enqueue on stop ThreadPool.&quot;);</span><br><span class="line"></span><br><span class="line">			tasks_.emplace([task] &#123;(*task)(); &#125;);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		condition_.notify_one();</span><br><span class="line"></span><br><span class="line">		return res;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~ThreadPool()</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;</span><br><span class="line">			std::unique_lock&lt;std::mutex&gt; locker(enqueue_mutex_);</span><br><span class="line">			is_stop_ &#x3D; true;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		condition_.notify_all();</span><br><span class="line"></span><br><span class="line">		std::for_each(threads_.begin(), threads_.end(), std::mem_fn(&amp;std::thread::join));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">	std::vector&lt;std::thread&gt; threads_;</span><br><span class="line">	std::queue&lt;std::function&lt;void()&gt;&gt; tasks_;</span><br><span class="line">	std::mutex enqueue_mutex_;</span><br><span class="line">	std::condition_variable condition_;</span><br><span class="line">	std::atomic_bool is_stop_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<!-- more -->]]></content>
      <categories>
        <category>c++</category>
        <category>code</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>code</tag>
      </tags>
  </entry>
</search>
